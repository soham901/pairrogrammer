{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Pairrogrammer!","text":"<p>Pairrogrammer is a mobile app designed to help CS students and project builders find their ideal collaborators based on skills, project interests, and mutual goals. Whether you're looking to team up for a project or find someone to help you learn and grow, Pairrogrammer connects you with like-minded individuals to work on exciting tech projects.</p>"},{"location":"#features","title":"Features","text":"<p>Pairrogrammer comes packed with features that make collaboration fun and effective:</p> <ul> <li>Skill-based Matchmaking: Find the best collaborators based on your skills, interests, and project ideas.</li> <li>Project Creation and Management: Easily create, join, and manage tech projects.</li> <li>AI-powered Recommendations: Get personalized recommendations for potential matches, project ideas, and learning paths.</li> <li>Gamification: Earn badges, points, and track your progress on the leaderboard.</li> <li>Collaborative Workflows: Seamless collaboration with in-app features that simplify communication and project tracking.</li> </ul> <p>For a detailed list of features, check out Features.</p>"},{"location":"#tech-stack","title":"Tech Stack","text":"<p>Pairrogrammer uses cutting-edge technologies to provide a seamless experience for users:</p> <ul> <li>Mobile App: Built with Flutter for a smooth and responsive user interface.</li> <li>Backend: Powered by Hono (TypeScript) to handle APIs and user data management.</li> <li>Database: PostgreSQL for structured data storage and efficient querying.</li> <li>AI: FastAPI for serving machine learning models to provide personalized recommendations and project ideas.</li> </ul> <p>For a complete breakdown of the tech stack, visit Tech Stack.</p>"},{"location":"#team","title":"Team","text":"<p>Meet the talented team behind Pairrogrammer:</p> <ul> <li>Model Monk: The AI and machine learning expert, responsible for the matching algorithm and skill recommendations.</li> <li>Pixel Pirate: The UI/UX designer, crafting a modern and fun user interface.</li> <li>Stack Sultan: The backend and DevOps wizard, managing the APIs, databases, and deployment pipeline.</li> </ul> <p>Read more about the team in Team.</p>"},{"location":"#contributing","title":"Contributing","text":"<p>We welcome contributions from developers, designers, and enthusiasts who want to help improve Pairrogrammer. Whether you want to fix bugs, add new features, or improve documentation, we would love your help!</p> <p>Check out our Contributing for detailed guidelines on how to get involved.</p>"},{"location":"#getting-started","title":"Getting Started","text":"<p>To get started with Pairrogrammer, you can either:</p> <ul> <li>Clone the repository and run the app locally.</li> <li>Use our deployed version (coming soon).</li> </ul> <p>For more detailed setup instructions, refer to our Tech Stack and Features.</p>"},{"location":"#future-features","title":"Future Features","text":"<p>We're continuously improving Pairrogrammer. Here are some features we plan to add in the future:</p> <ul> <li>Chat Integration: Real-time communication within the app.</li> <li>AI-Powered Project Creation: Automatically generate project ideas using GPT-based models.</li> <li>Cross-Platform Expansion: A web version of Pairrogrammer for desktop users.</li> <li>Skill Assessment: Coding challenges and quizzes to validate skills.</li> <li>Social Sharing: Share your project progress and achievements on social media.</li> </ul> <p>Thank you for checking out Pairrogrammer! We hope you find your perfect collaborator and build something amazing together.</p>"},{"location":"contributing/","title":"Contributing to Pairrogrammer","text":"<p>Thank you for considering contributing to Pairrogrammer! We welcome contributions from the community to help improve the project and make it better for everyone. Whether you are fixing bugs, adding features, or improving documentation, your contributions are highly appreciated.</p>"},{"location":"contributing/#how-to-contribute","title":"How to Contribute","text":""},{"location":"contributing/#1-fork-the-repository","title":"1. Fork the Repository","text":"<p>Start by forking the Pairrogrammer repository to your own GitHub account:</p> <ol> <li>Go to the Pairrogrammer repository on GitHub.</li> <li>Click the Fork button at the top right of the page.</li> <li>This will create a copy of the repository in your GitHub account.</li> </ol>"},{"location":"contributing/#2-clone-your-fork","title":"2. Clone Your Fork","text":"<p>Clone your forked repository to your local machine:</p> <pre><code>git clone https://github.com/your-username/pairrogrammer.git\ncd pairogrammer\n</code></pre>"},{"location":"contributing/#3-make-changes","title":"3. Make Changes","text":"<p>Make your changes to the codebase, fix bugs, or add new features.</p>"},{"location":"contributing/#4-push-your-changes","title":"4. Push Your Changes","text":"<p>Push your changes to your forked repository:</p> <pre><code>git add .\ngit commit -m \"Your commit message\"\ngit push origin branch-name\n</code></pre>"},{"location":"contributing/#5-create-a-pull-request","title":"5. Create a Pull Request","text":"<p>Once you have pushed your changes, create a pull request from your forked repository to the original repository:</p> <ol> <li>Go to the Pairrogrammer repository on GitHub.</li> <li>Click the Pull Requests tab.</li> <li>Click the New Pull Request button.</li> <li>Select the branch from your forked repository.</li> <li>Click Create Pull Request.</li> </ol>"},{"location":"contributing/#thank-you","title":"Thank You","text":"<p>We appreciate your contributions to Pairrogrammer and hope you have a great experience contributing.</p> <p>If you have any questions or need further assistance, please don't hesitate to reach out to us at soham901.</p> <p>Thank you again for contributing to Pairrogrammer!</p>"},{"location":"features/","title":"Features of Pairrogrammer","text":"<p>Pairrogrammer is designed to help CS students and project builders find the best collaborators using AI-powered matchmaking and gamified collaboration. Here's an overview of the core features:</p>"},{"location":"features/#1-user-authentication","title":"1. User Authentication \ud83d\udd11","text":"<ul> <li>Sign Up/Log In: Users can sign up and log in using Google, GitHub, or email.</li> <li>Profile Management: Users can manage their profiles with skills, interests, badges, and project history.</li> </ul>"},{"location":"features/#2-skill-based-matchmaking","title":"2. Skill-Based Matchmaking \ud83e\udd1d","text":"<ul> <li>Skill Matching: The app matches users based on their skills, project ideas, and interests.</li> <li>AI-Powered Recommendations: An AI-powered recommendation system suggests potential collaborators with high compatibility, leveraging machine learning models (FastAPI + Ollama or Hugging Face).</li> </ul>"},{"location":"features/#3-project-creation-and-collaboration","title":"3. Project Creation and Collaboration \ud83d\udee0\ufe0f","text":"<ul> <li>Create Projects: Users can create new projects with detailed descriptions, skills required, and team size.</li> <li>Join Projects: Users can explore and join open projects.</li> <li>Collaborative Management: Each project allows users to see collaborators, track progress, and manage tasks together.</li> </ul>"},{"location":"features/#4-gamification","title":"4. Gamification \ud83c\udfae","text":"<ul> <li>Points &amp; Badges: Users earn points and badges for completing tasks, collaborating on projects, and contributing skills.</li> <li>Leaderboards: A leaderboard system highlights the most active contributors, fostering competition and motivation.</li> <li>Streaks: Users can build streaks based on their activity in collaborations and project progress.</li> </ul>"},{"location":"features/#5-ai-powered-skill-project-recommendations","title":"5. AI-Powered Skill &amp; Project Recommendations \ud83e\udd16","text":"<ul> <li>Skill Recommendations: The app suggests personalized learning paths for users to improve their skills based on their profile and project involvement.</li> <li>Project Tagging: AI auto-tags projects with relevant categories (e.g., Web Development, Machine Learning, Mobile Development), making it easier to find the right projects.</li> <li>Matchmaking Refinement: Over time, the AI refines the matchmaking algorithm based on user feedback and project completion data.</li> </ul>"},{"location":"features/#6-real-time-collaboration-communication","title":"6. Real-Time Collaboration &amp; Communication \ud83d\udcac","text":"<ul> <li>Integrated Chat: (Future feature) Real-time chat functionality allows users to communicate seamlessly within their projects.</li> <li>Discussion Threads: Projects can have discussion threads to coordinate tasks, share resources, and discuss ideas.</li> </ul>"},{"location":"features/#7-ai-powered-project-creation","title":"7. AI-Powered Project Creation \ud83e\udde0","text":"<ul> <li>Generate Ideas: (Future feature) Users can leverage GPT-powered AI to generate project ideas based on their interests and skills.</li> <li>Automatic Task Distribution: AI helps distribute tasks based on collaborators' strengths and availability.</li> </ul>"},{"location":"features/#8-cross-platform-compatibility","title":"8. Cross-Platform Compatibility \ud83c\udf10","text":"<ul> <li>Mobile App: The main platform is a mobile app built using Flutter, offering an engaging and responsive interface.</li> <li>Web App (Future feature): A web version of Pairrogrammer will be available for desktop users, ensuring that the platform is accessible on any device.</li> </ul>"},{"location":"features/#9-social-sharing","title":"9. Social Sharing \ud83d\udcf2","text":"<ul> <li>Share Achievements: (Future feature) Users can share their project progress, achievements, and badges on social media platforms like LinkedIn, Twitter, etc.</li> <li>Community Building: The ability to showcase contributions helps users build a reputation within the community.</li> </ul>"},{"location":"features/#future-features","title":"Future Features","text":"<ol> <li>Chat Integration: Real-time messaging via WebSockets for enhanced communication.</li> <li>Skill Assessment: In-app coding challenges and quizzes to assess users' skills.</li> <li>Cross-Platform Expansion: A web version of the app to reach desktop users.</li> <li>AI Project Creation: Use AI to generate unique project ideas and suggest collaborations.</li> <li>Gamification Enhancements: More gamified features, like daily challenges and team-based competitions.</li> </ol>"},{"location":"features/#note","title":"Note","text":"<p>The app will evolve over time, and additional features will be added based on user feedback and project needs. Stay tuned for more updates and feature rollouts!</p>"},{"location":"license/","title":"License","text":"<p>MIT License</p> <p>Copyright (c) 2024 Soham</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>"},{"location":"project-plan/","title":"Project Plan for Pairrogrammer","text":""},{"location":"project-plan/#core-idea","title":"Core Idea","text":"<p>A mobile app where CS students and project builders can connect to find their ideal collaborators based on skills, project ideas, and mutual interests. The platform integrates AI-driven recommendations, intuitive UI, and gamification to create an engaging user experience.</p>"},{"location":"project-plan/#roles-and-responsibilities","title":"Roles and Responsibilities","text":""},{"location":"project-plan/#1-model-monk-friend-1","title":"1. Model Monk (Friend 1)","text":""},{"location":"project-plan/#responsibilities","title":"Responsibilities:","text":"<ul> <li> <p>AI-Driven Matching System:</p> </li> <li> <p>Develop and fine-tune matching algorithms using user inputs such as skills, interests, experience, and project history.</p> </li> <li> <p>Use pre-trained LLMs (e.g., Ollama, Hugging Face) for enhanced recommendations.</p> </li> <li> <p>Skill Recommendation AI:</p> </li> <li> <p>Suggest learning resources and personalized skill improvement paths.</p> </li> <li> <p>NLP for Project Tagging:</p> </li> <li> <p>Auto-tag project descriptions with relevant categories using NLP.</p> </li> <li> <p>Backend Integration:</p> </li> <li>Expose AI functionalities via FastAPI endpoints for use by the backend.</li> </ul>"},{"location":"project-plan/#tools","title":"Tools:","text":"<ul> <li>Python (FastAPI, scikit-learn, or TensorFlow/PyTorch).</li> <li>Ollama or Hugging Face for LLMs.</li> <li>Postgres for storing training data and user stats.</li> </ul>"},{"location":"project-plan/#2-pixel-pirate-friend-2","title":"2. Pixel Pirate (Friend 2)","text":""},{"location":"project-plan/#responsibilities_1","title":"Responsibilities:","text":"<ul> <li> <p>UI/UX Design:</p> </li> <li> <p>Create an interactive and fun UI with swipe-based match interactions and engaging animations.</p> </li> <li> <p>Gamification:</p> </li> <li> <p>Design badges, streaks, points, and leaderboards to enhance user engagement.</p> </li> <li> <p>User Flows:</p> </li> <li> <p>Smooth onboarding, seamless matching, and intuitive collaboration management.</p> </li> <li> <p>Responsive Design:</p> </li> <li>Ensure the app is highly responsive on mobile devices.</li> </ul>"},{"location":"project-plan/#tools_1","title":"Tools:","text":"<ul> <li>Figma or Adobe XD for prototypes.</li> <li>Flutter for building the mobile app.</li> <li>Lottie for animations.</li> </ul>"},{"location":"project-plan/#3-stack-sultan-me","title":"3. Stack Sultan (Me)","text":""},{"location":"project-plan/#responsibilities_2","title":"Responsibilities:","text":"<ul> <li>Backend Development:</li> <li>Implement APIs with Hono (TypeScript) for:<ul> <li>User authentication (GitHub, email).</li> <li>Matchmaking and project data handling.</li> <li>Handling project CRUD (Create, Read, Update, Delete).</li> </ul> </li> <li>Integrate FastAPI AI endpoints for real-time recommendations.</li> <li>Frontend Integration:</li> <li>Ensure smooth communication between Flutter app and backend APIs.</li> <li>Database Management:</li> <li>Design Postgres schema for users, projects, and matches.</li> <li>Optimize queries for performance and scalability.</li> <li>DevOps:</li> <li>Set up deployment pipelines, containerization (Docker), and scalable hosting solutions.</li> <li>Use GitHub Actions for CI/CD.</li> </ul>"},{"location":"project-plan/#tools_2","title":"Tools:","text":"<ul> <li>Hono (TypeScript) for backend.</li> <li>Flutter for mobile development.</li> <li>Postgres for database.</li> <li>Docker for containerization.</li> <li>GitHub Actions for CI/CD.</li> </ul>"},{"location":"project-plan/#feature-development-timeline","title":"Feature Development Timeline","text":""},{"location":"project-plan/#week-1-planning-and-setup","title":"Week 1: Planning and Setup","text":""},{"location":"project-plan/#define-mvp-features","title":"Define MVP features:","text":"<ul> <li>User authentication. \ud83d\udd27</li> <li>Skill-based matchmaking. \ud83d\udd27</li> <li>Project creation and collaboration. \ud83e\udd1d</li> </ul>"},{"location":"project-plan/#set-up-the-development-environment","title":"Set up the development environment:","text":"<ul> <li>Backend (Hono + FastAPI). \ud83e\udd1d</li> <li>Flutter app. \ud83e\udd1d</li> <li>Postgres database. \ud83e\udd1d</li> </ul>"},{"location":"project-plan/#design-database-schema","title":"Design database schema:","text":"<ul> <li>Users: id, name, email, skills, interests, badges. \ud83d\udd27</li> <li>Projects: id, title, description, skills_required, collaborators. \ud83d\udd27</li> <li>Matches: id, user_id, match_id, compatibility_score. \ud83d\udd27</li> </ul>"},{"location":"project-plan/#research-and-implement-mock-ml-models","title":"Research and implement mock ML models:","text":"<ul> <li>Skill recommendation, project tagging, and matchmaking. \ud83e\udd1d</li> </ul>"},{"location":"project-plan/#create-basic-user-flows-in-flutter","title":"Create basic user flows in Flutter:","text":"<ul> <li>Onboarding. \ud83e\udd1d</li> <li>Project creation. \ud83e\udd1d</li> <li>Project collaboration. \ud83e\udd1d</li> </ul>"},{"location":"project-plan/#week-2-backend-and-ml-development","title":"Week 2: Backend and ML Development","text":""},{"location":"project-plan/#build-hono-apis-for","title":"Build Hono APIs for:","text":"<ul> <li>User authentication and profile management. \ud83d\udd27</li> <li>Fetching and updating project data. \ud83d\udd27</li> <li>Fetching match recommendations from ML models. \ud83e\udd1d</li> </ul>"},{"location":"project-plan/#develop-the-ml-recommendation-system","title":"Develop the ML recommendation system:","text":"<ul> <li>Train/test matching algorithm on dummy data. \ud83d\udd27</li> <li>Create APIs in FastAPI to expose ML model results. \ud83e\udd1d</li> </ul>"},{"location":"project-plan/#week-3-mobile-app-ui-development","title":"Week 3: Mobile App UI Development","text":""},{"location":"project-plan/#design-key-screens-in-flutter","title":"Design key screens in Flutter:","text":"<ul> <li>Home: Skill-based matches (Tinder-style swipe interface). \ud83e\udd1d</li> <li>Profile: Show skills, badges, and projects. \ud83e\udd1d</li> <li>Projects: Manage created and joined projects. \ud83e\udd1d</li> </ul>"},{"location":"project-plan/#integrate-backend-apis","title":"Integrate backend APIs:","text":"<ul> <li>Fetch user profiles, matches, and projects. \ud83e\udd1d</li> </ul>"},{"location":"project-plan/#week-4-gamification-and-final-touches","title":"Week 4: Gamification and Final Touches","text":""},{"location":"project-plan/#add-gamified-features","title":"Add gamified features:","text":"<ul> <li>Points and badges for completing projects or contributing skills. \ud83e\udd1d</li> <li>Leaderboard for top collaborators. \ud83e\udd1d</li> </ul>"},{"location":"project-plan/#optimize-ml-model-recommendations-based-on-user-feedback","title":"Optimize ML model recommendations based on user feedback: \ud83e\udd1d","text":""},{"location":"project-plan/#test-the-app","title":"Test the app:","text":"<ul> <li>Debug API integrations and UI flows. \ud83e\udd1d</li> <li>Run performance tests on ML endpoints. \ud83d\udd27</li> </ul>"},{"location":"project-plan/#future-features-post-mvp","title":"Future Features (Post-MVP)","text":""},{"location":"project-plan/#chat-integration","title":"Chat Integration:","text":"<ul> <li>Allow users to communicate within the app. \ud83e\udd1d</li> <li>Use WebSockets for real-time messaging. \ud83e\udd1d</li> </ul>"},{"location":"project-plan/#ai-powered-project-creation","title":"AI-Powered Project Creation:","text":"<ul> <li>Generate project ideas using third party models (via Ollama or Hugging Face). \ud83e\udd1d</li> </ul>"},{"location":"project-plan/#cross-platform-expansion","title":"Cross-Platform Expansion:","text":"<ul> <li>Build a web version of the app for desktops (using Flutter Web or React). \ud83d\udd27</li> </ul>"},{"location":"project-plan/#skill-assessment","title":"Skill Assessment:","text":"<ul> <li>Include quizzes or coding challenges to verify users' skills. \ud83e\udd1d</li> </ul>"},{"location":"project-plan/#social-sharing","title":"Social Sharing:","text":"<ul> <li>Let users share project updates or achievements on social media. \ud83e\udd1d</li> </ul>"},{"location":"team/","title":"The Pairrogrammer Team","text":"<p>The Pairrogrammer team consists of talented individuals who bring a variety of skills and expertise to the project. Each team member plays a crucial role in building, improving, and growing the platform.</p>"},{"location":"team/#meet-the-team","title":"Meet the Team","text":""},{"location":"team/#model-monk-friend-1","title":"Model Monk (Friend 1)","text":"<p>Role: AI &amp; Machine Learning Developer</p>"},{"location":"team/#responsibilities","title":"Responsibilities:","text":"<ul> <li>Develop and fine-tune the AI-powered matching algorithm to recommend the best collaborators based on skills, interests, and project history.</li> <li>Create a skill-recommendation system to guide users toward learning paths to improve their skills.</li> <li>Implement Natural Language Processing (NLP) to analyze project descriptions and auto-tag them with relevant categories.</li> <li>Work closely with the backend team to integrate ML models via FastAPI endpoints.</li> </ul>"},{"location":"team/#skills","title":"Skills:","text":"<ul> <li>Python, FastAPI, scikit-learn, TensorFlow/PyTorch</li> <li>Machine Learning (Supervised &amp; Unsupervised)</li> <li>NLP, AI Models (Ollama, Hugging Face)</li> </ul>"},{"location":"team/#pixel-pirate-friend-2","title":"Pixel Pirate (Friend 2)","text":"<p>Role: UI/UX Designer &amp; Frontend Developer</p>"},{"location":"team/#responsibilities_1","title":"Responsibilities:","text":"<ul> <li>Design the user interface (UI) to be modern, intuitive, and mobile-responsive.</li> <li>Build fun and engaging user experiences, including onboarding flows and interactive elements.</li> <li>Implement gamified features like points, badges, and leaderboards.</li> <li>Collaborate with the backend team to ensure smooth integration between the app UI and APIs.</li> </ul>"},{"location":"team/#skills_1","title":"Skills:","text":"<ul> <li>UI/UX Design (Figma, Adobe XD)</li> <li>Flutter (Mobile Development)</li> <li>Animation (Lottie)</li> </ul>"},{"location":"team/#stack-sultan-me","title":"Stack Sultan (Me)","text":"<p>Role: Backend Developer &amp; DevOps</p>"},{"location":"team/#responsibilities_2","title":"Responsibilities:","text":"<ul> <li>Build backend APIs using Hono (TypeScript) for authentication, project management, and match recommendations.</li> <li>Develop integration between the backend and machine learning models via FastAPI.</li> <li>Design and optimize the PostgreSQL database schema for users, projects, and matches.</li> <li>Set up and manage the deployment pipeline, ensuring scalability and reliability.</li> <li>Integrate and manage the frontend with backend services and APIs.</li> </ul>"},{"location":"team/#skills_2","title":"Skills:","text":"<ul> <li>Backend Development (Hono, FastAPI, TypeScript)</li> <li>Database Management (PostgreSQL)</li> <li>DevOps (Docker, CI/CD, GitHub Actions)</li> </ul>"},{"location":"team/#team-collaboration","title":"Team Collaboration","text":"<p>While each team member specializes in a different area, we collaborate closely to build a seamless and user-friendly product. Regular team meetings ensure that all aspects of the project\u2014backend, frontend, AI, and UI\u2014are well-coordinated.</p>"},{"location":"team/#key-collaborative-features","title":"Key Collaborative Features:","text":"<ul> <li>Matching Algorithm: While Model Monk works on the AI models, Pixel Pirate and Stack Sultan collaborate on designing the user flow and integrating the algorithm into the app.</li> <li>Gamification: Pixel Pirate designs the gamified UI elements, while Stack Sultan builds the API endpoints to track user progress and interactions.</li> <li>App Integrations: All team members work together to ensure smooth integration between the app\u2019s frontend, backend, and ML-powered features.</li> </ul> <p>We are constantly learning and growing together, and we're excited to continue building Pairrogrammer with the support of our amazing community and if you want to join us, you can start contributing to the project here.</p>"},{"location":"tech_stack/","title":"Tech Stack for Pairrogrammer","text":"<p>Pairrogrammer is built with a modern, efficient, and scalable tech stack to ensure smooth functionality and a seamless user experience. Here\u2019s an overview of the core technologies used in the project:</p>"},{"location":"tech_stack/#1-mobile-app-flutter","title":"1. Mobile App: Flutter \ud83d\udcf1","text":"<ul> <li>Flutter: The app is developed using Flutter to ensure a smooth, cross-platform user experience. Flutter allows us to build natively compiled applications for mobile (iOS and Android) from a single codebase.</li> <li>Dart: Flutter uses Dart as its programming language, enabling fast development and high-performance apps.</li> </ul>"},{"location":"tech_stack/#why-flutter","title":"Why Flutter?","text":"<ul> <li>Cross-Platform: One codebase for both iOS and Android.</li> <li>Rich UI: Offers a rich set of pre-designed widgets, allowing us to create engaging and beautiful UI/UX.</li> <li>Fast Development: Hot-reload feature for rapid development.</li> </ul>"},{"location":"tech_stack/#2-backend-hono-fastapi","title":"2. Backend: Hono + FastAPI \u2699\ufe0f","text":"<ul> <li>Hono: A lightweight, fast, and secure web framework for building APIs with TypeScript. It is used to build the main backend APIs for Pairrogrammer, including authentication, project management, and matchmaking.</li> <li>FastAPI: Used for handling the AI-powered matchmaking system and providing the backend services for model inference. FastAPI allows for quick and easy creation of APIs and integrates well with Python-based AI models.</li> </ul>"},{"location":"tech_stack/#why-hono-fastapi","title":"Why Hono + FastAPI?","text":"<ul> <li>Performance: Both Hono and FastAPI are known for their high performance, handling high loads and providing fast response times.</li> <li>Ease of Use: FastAPI simplifies working with Python-based models, and Hono is perfect for TypeScript developers.</li> <li>Scalability: Both frameworks are highly scalable and can handle growing user bases.</li> </ul>"},{"location":"tech_stack/#3-database-postgresql","title":"3. Database: PostgreSQL \ud83d\uddc3\ufe0f","text":"<ul> <li>PostgreSQL: A powerful, open-source relational database system that stores data for Pairrogrammer, including user profiles, project data, and match information.</li> </ul>"},{"location":"tech_stack/#why-postgresql","title":"Why PostgreSQL?","text":"<ul> <li>Reliability: PostgreSQL is a mature and stable database known for its reliability and data integrity.</li> <li>Advanced Features: It supports advanced SQL features such as indexing, full-text search, and complex queries.</li> <li>Scalability: PostgreSQL can handle large datasets and is scalable for high traffic applications.</li> </ul>"},{"location":"tech_stack/#4-ai-models-fastapi-ollama","title":"4. AI Models: FastAPI + Ollama \ud83e\udd16","text":"<ul> <li>FastAPI for AI: FastAPI exposes the AI models to the backend via APIs. It handles the inference requests and returns AI-powered recommendations for matchmaking, skill suggestions, and project categorization.</li> <li>Ollama: For leveraging pre-trained language models (LLMs) like GPT-based models for generating project ideas, assisting with skills recommendations, and enhancing overall AI functionality.</li> </ul>"},{"location":"tech_stack/#why-fastapi-ollama","title":"Why FastAPI + Ollama?","text":"<ul> <li>Speed: FastAPI is optimized for AI services, allowing quick inference and seamless integration of models.</li> <li>AI Customization: Ollama allows easy integration with LLMs and other AI services to create intelligent features for matching and project suggestions.</li> </ul>"},{"location":"tech_stack/#5-containerization-deployment-docker-cicd","title":"5. Containerization &amp; Deployment: Docker + CI/CD \ud83d\udc33","text":"<ul> <li>Docker: Used to containerize the backend and AI services for easy deployment and scaling. Docker ensures the app runs consistently across different environments.</li> <li>CI/CD with GitHub Actions: GitHub Actions automates the build, test, and deployment process, ensuring smooth continuous integration and delivery.</li> </ul>"},{"location":"tech_stack/#why-docker-cicd","title":"Why Docker &amp; CI/CD?","text":"<ul> <li>Portability: Docker ensures that the application works on any machine, from local development environments to production servers.</li> <li>Automation: CI/CD pipelines automate testing and deployment, reducing manual work and improving reliability.</li> </ul>"},{"location":"tech_stack/#6-hosting-deployment-flyio-render","title":"6. Hosting &amp; Deployment: Fly.io, Render \ud83c\udf10","text":"<ul> <li>Fly.io: Used for deploying the backend and AI services to a scalable cloud infrastructure.</li> <li>Render: Used for hosting the Flutter app\u2019s backend services.</li> </ul>"},{"location":"tech_stack/#why-flyio-render","title":"Why Fly.io &amp; Render?","text":"<ul> <li>Scalability: Fly.io offers seamless scaling for global applications.</li> <li>Ease of Use: Render allows for easy deployment with automatic SSL certificates and simplified configuration.</li> </ul>"},{"location":"tech_stack/#7-version-control-git-github","title":"7. Version Control: Git + GitHub \ud83e\uddd1\u200d\ud83d\udcbb","text":"<ul> <li>Git: Git is used for version control, ensuring that all team members are on the same page when developing features and fixing bugs.</li> <li>GitHub: All code is hosted on GitHub, providing collaboration tools like pull requests, issue tracking, and CI/CD integration.</li> </ul>"},{"location":"tech_stack/#why-git-github","title":"Why Git + GitHub?","text":"<ul> <li>Collaboration: GitHub provides an easy way for team members to collaborate and review each other's code.</li> <li>Version Control: Git tracks changes to the codebase, enabling easy rollbacks and version management.</li> </ul>"},{"location":"tech_stack/#conclusion","title":"Conclusion","text":"<p>Pairrogrammer combines a modern tech stack with AI-powered recommendations and cross-platform support to provide a user-friendly and scalable platform for CS students and project builders. The combination of Flutter, Hono, FastAPI, PostgreSQL, Ollama, and Docker ensures that the app is fast, reliable, and future-proof.</p>"},{"location":"tech_stack/#breakdown","title":"Breakdown:","text":"<ul> <li>Mobile App: Uses Flutter for its cross-platform capability, ensuring a responsive experience on both iOS and Android.</li> <li>Backend: Uses Hono for API handling and FastAPI for AI integrations.</li> <li>Database: Uses PostgreSQL for structured data storage and management.</li> <li>AI Models: FastAPI and Ollama power the AI features like matchmaking and project idea generation.</li> <li>Containerization: Docker enables smooth deployment, while GitHub Actions handles CI/CD.</li> <li>Hosting: Services are deployed on Fly.io and Render for scalability and performance.</li> </ul>"}]}